cor(bp.obese[sex==0,]$obese, bp.obese[sex==1,]$obese)
cor.test(bp.obese[sex==0,]$obese, bp.obese[sex==1,]$obese)
cor.test(sample(bp.obese[sex==0,]$obese, 10), sample(bp.obese[sex==1,]$obese, 10))
cor.test(sample(bp.obese[sex==0,]$obese, 20), sample(bp.obese[sex==1,]$obese, 20))
cor.test(sample(bp.obese[sex==0,]$obese, 30), sample(bp.obese[sex==1,]$obese, 30))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 50), sample(bp.obese[sex==1,]$obese, 50))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor.test(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
cor(sample(bp.obese[sex==0,]$obese, 40), sample(bp.obese[sex==1,]$obese, 40))
?bp.obese
cor(sample(male, 40), sample(female, 40))
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
male = bp.obese[sex==0,]$obese
female = bp.obese[sex==1,]$obese
cor(sample(male, 40), sample(female, 40))
cor(sample(male, 40), sample(female, 40))
cor(sample(male, 40), sample(female, 40))
cor(sample(male, 40), sample(female, 40))
cor(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
cor.test(sample(male, 40), sample(female, 40))
# p-value > 0.5 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(male)
shapiro.test(female)
# p-value > 0.5 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(male)
shapiro.test(female)
plot(female)
barplot(female)
barplot(female)
hist(female)
hist(male)
shapiro.test(female)
ad.test(female)
import(nortest)
library(nortest)
ad.test(female)
ad.test(male)
data("eba1977")
?eba1977
data("malaria")
?malaria
head(malaria)
head(malaria)
?women
head(women)
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(height, weight)
head(women)
attach(women)
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(height, weight)
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(height, weight)
data("sleep")
?sleep
head(sleep)
data("randu")
?randu
head(randu)
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(x, y)
attach(randu)
# будем работать по двум полам и их уровню ожирения
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(x, y)
# будем работать по x и y
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(x, y)
# p-value > 0.5 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(x)
shapiro.test(y)
hist(x)
data("precip")
?precip
head(precip)
attach(precip)
?precip
# будем работать по Juneau(Alaska) и Los Angeles(California)
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
cor.test(precip.Juneau, precip.Los)
# будем работать по Juneau(Alaska) и Los Angeles(California)
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
precip["Juneau"]
head(precip)
data("nhtemp")
?nhtemp
head(nhtemp)
nhtemp
?morley
data("morley")
?morley
head(morley)
attach(morley)
?morley
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1]$Speed
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1,]$Speed
second = morley[Expt == 2,]$Speed
cor.test(first, second)
# p-value > 0.5 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(first)
shapiro.test(second)
hist(first)
hist(second)
# p-value > 0.05 -> нормальные
# 3. дисперсии примерно равны
sd(first)
sd(second)
# p-value > 0.05 -> нормальные
t.test(expend ~ stature) # дисперсии неравны
# p-value > 0.05 -> нормальные
t.test(first ~ second) # дисперсии неравны
first
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2]$Speed
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2,]$Speed
first
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2 ,]$Speed
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2 ,]$Speed
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2 | Expt == 3,]$Speed
second = morley[Expt == 4 | Expt == 5 | Expt == 6,]$Speed
cor.test(first, second)
len(first)
length(first)
length(second)
# будем работать по expt #1 и #2
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1 | Expt == 2,]$Speed
second = morley[Expt == 3 | Expt == 4,]$Speed
cor.test(first, second)
cor.test(first, second)
# p-value > 0.05 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(first)
shapiro.test(second)
# p-value > 0.05 -> нормальные
t.test(first ~ second) # дисперсии неравны
# p-value > 0.05 -> нормальные
sd(first)
sd(second)
t.test(first ~ second, var.equal=T) # дисперсии близки
expend
stature
# будем работать по expt #1, 2 и #3, 4
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
morley[Expt==2]$Expt = 2
# будем работать по expt #1, 2 и #3, 4
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
morley[Expt==2,]$Expt = 1
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==4,]$Expt = 3
morley[Expt==3,]$Expt = 2
head(morley)
data("morley")
?morley
head(morley)
attach(morley)
head(morley)
data("morley")
?morley
head(morley)
morley
attach(morley)
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==4,]$Expt = 3
morley[Expt==3,]$Expt = 2
morley
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==4,]$Expt = 3
morley[Expt==3,]$Expt = 2
morley
data("morley")
?morley
head(morley)
morley
attach(morley)
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==3,]$Expt = 2
morley[Expt==4,]$Expt = 2
morley
first = morley[Expt == 1 | Expt == 2,]$Speed
morley = morley[Expt != 5]
morley = morley[Expt != 5,]
morley
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==3,]$Expt = 2
morley[Expt==4,]$Expt = 2
morley
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1,]$Speed
second = morley[Expt == 2,]$Speed
cor.test(first, second)
# p-value > 0.05 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(first)
shapiro.test(second)
# p-value > 0.05 -> нормальные
sd(first)
sd(second)
t.test(first ~ second) # дисперсии не близки
t.test(Speed ~ Expt) # дисперсии не близки
morley
t.test(Speed ~ Expt) # дисперсии не близки
t.test(Expt ~ Speed) # дисперсии не близки
factor(Expt)
attach(morley)
morley
t.test(Expt ~ Speed) # дисперсии не близки
t.test(Speed ~ Expt) # дисперсии не близки
data("morley")
?morley
head(morley)
morley
attach(morley)
# будем работать по expt #1, 2 и #3, 4
morley[Expt==2,]$Expt = 1  # перегруппируем
morley[Expt==3,]$Expt = 2
morley[Expt==4,]$Expt = 2
morley = morley[Expt != 5,]
attach(morley)
# чтобы применить тест Стьюеднта
# 1. не должны быть коррелирующими
first = morley[Expt == 1,]$Speed
second = morley[Expt == 2,]$Speed
cor.test(first, second)
# p-value > 0.05 -> не коррелируют
# 2. соответствуют нормальному распределению
shapiro.test(first)
shapiro.test(second)
# p-value > 0.05 -> нормальные
sd(first)
sd(second)
t.test(Speed ~ Expt) # дисперсии близки
first
t.test(Speed ~ Expt, var.equal=T) # дисперсии близки
# p-value > 0.05 -> нормальные
sd(first)
sd(second)
t.test(Speed ~ Expt, var.equal=T) # дисперсии близки
# p-value > 0.05 -> нормальные
mean(first)
mean(second)
# p-value > 0.05 -> нормальные
sd(first)
sd(second)
t.test(Speed ~ Expt, var.equal=T) # дисперсии близки
t.test(first, second, alternative = 'Greater')
t.test(first, second, alternative = 'greater')
t.test(first, second, alternative = 'lower')
t.test(first, second, alternative = 'less')
t.test(Speed ~ Expt, var.equal=T) # дисперсии близки
t.test(first, second, alternative = 'less')
t.test(Speed ~ Expt, var.equal=T) # дисперсии близки
# p-value < 0.05 -> средние не равны
t.test(first, second, alternative = 'less')
# p-value < 0.05 -> средние не равны
d = t.test(first, second, alternative = 'less')
d
# p-value > 0.05 -> разница в средних меньше 0
power.t.test(n = length(first), delta = mean(first) - mean(second),
sd = mean(sd(first), sd(second)), sig.level = 0.05)
# Расчет мощности критерия - вспомнить, что это такое
power.t.test(n = 15, delta = 3.0, sd = 1.8, sig.level = 0.05)
# power == 0.7, что недостаточно много
# при каком объеме можно увеличить до 0.9?
power.t.test(delta = mean(first) - mean(second),
sd = mean(sd(first), sd(second)), sig.level = 0.05, power = 0.9)
# p-value > 0.05 -> нормальные
var.test(first, second)
# p-value > 0.05 -> не совпадают дисперсии
t.test(Speed ~ Expt, var.equal=F)
# p-value < 0.05 -> средние не равны
t.test(first, second, alternative = 'less')
# p-value > 0.05 -> разница в средних меньше 0
power.t.test(n = length(first), delta = mean(first) - mean(second),
sd = mean(sd(first), sd(second)), sig.level = 0.05)
# power == 0.7, что недостаточно много
# при каком объеме можно увеличить до 0.9?
power.t.test(delta = mean(first) - mean(second),
sd = mean(sd(first), sd(second)), sig.level = 0.05, power = 0.9)
data("randu")
attach(randu)
attach("randu")
x
# будем работать по x и y
shapiro.test(x)
shapiro.test(y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# Одновыборочный критерий Уилкоксона
# Гипотеза: выборка из симметричного семейства с известным средним mu
d.intake <- c(5260, 5470, 5640, 6180, 6390, 6515,
6805, 7515, 7515, 8230, 8770)
wilcox.test(d.intake, mu = 7725)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value < 0.05 -> распределение не нормальное
mean(x)
mean(y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value < 0.05 -> распределение не нормальное
wilcox.test(x, y)
# p-value > 0.05 -> средние совпадают
power.t.test(n = length(x), delta = mean(x) - mean(y),
sd = mean(sd(x), sd(y)), sig.level = 0.05)
data("randu")
?randu
# p-value < 0.05 -> распределение не нормальное
cor.test(x, y)
leveneTest(first, second)
library(car)
var.test(first, second) # Фишер
# p-value 0.15
leveneTest(first, second) # Левене
# p-value 0.15
bartlett.test(first, second) # Бартлетт
# p-value 0.15
bartlette.test(first, second) # Бартлетт
# p-value 0.15
bartlett.test(first, second) # Бартлетт
# p-value > 0.05 -> средние совпадают
first
var.test(first, second) # Фишер
# p-value 0.15
leveneTest(first, second) # Левене
# p-value 0.15
bartlett.test(first, second) # Бартлетт
# p-value 0.15
bartlett.test(first, second) # Бартлетт
# p-value 0.15
bartlett.test(first, second, data=morley) # Бартлетт
# p-value 0.15
bartlett.test(morley$Expt ~ morley$Speed, data=morley) # Бартлетт
# p-value 0.15
bartlett.test(morley$Speed ~ morley$Expt
, data=morley) # Бартлетт
# p-value 0.15
flignet.test(morley$Speed ~ morley$Expt) # Флигнет
# p-value 0.15
fligner.test(morley$Speed ~ morley$Expt) # Флигнер
# Критерий Левене
leveneTest(count ~ spray, data = InsectSprays)
leveneTest(count ~ spray, data = InsectSprays, center = mean)
# Критерий Бартлетта
bartlett.test(count ~ spray, data = InsectSprays)
# Критерий Флигнера-Килина
fligner.test(count ~ spray, data = InsectSprays)
# p-value 0.15
fligner.test(morley$Speed ~ morley$Expt) # Флигнер
var.test(first, second) # Фишер
# p-value 0.15
leveneTest(first, second) # Левене
var.test(first, second) # Фишер
match_results = read.csv(file.choose())
gds_abs = abs(match_results$FTAG-match_results$FTHG)
hist(gds_abs, breaks=4)
gds  # from last hw
gds=sort(gds)
hist(gds, freq=F)
match_results = read.csv(file.choose())
attach(match_results)
seasons = unique(Season)
gds = c()
for (i in seasons) {
teams = unique(match_results$AwayTeam[Season==i])
gds <- c(gds,unlist(lapply(teams, season=i, get_goals_scored)) -
unlist(lapply(teams, season=i, get_goals_conceded)))
}
get_goals_scored <- function(team_name, season) {
get_goals_scored <- sum(subset(match_results, select=c(FTAG),
subset=(AwayTeam==team_name & Season==season))) +
sum(subset(match_results, select=c(FTHG),
subset=(HomeTeam==team_name & Season==season)))
}
get_goals_conceded <- function(team_name, season) {
get_goals_conceded <- sum(subset(match_results, select=c(FTHG),
subset=(AwayTeam==team_name & Season==season))) +
sum(subset(match_results, select=c(FTAG),
subset=(HomeTeam==team_name & Season==season)))
}
get_points <- function(team_name, season) {
get_points <- 3 * length(unlist(subset(match_results, select=c(FTR),
subset=(HomeTeam==team_name & FTR=='H' & Season==season)))) +
3 * length(unlist(subset(match_results, select=c(FTR),
subset=(AwayTeam==team_name & FTR=='A' & Season==season)))) +
1 * length(unlist(subset(match_results, select=c(FTR),
subset=((HomeTeam==team_name | AwayTeam==team_name) & FTR=='D' & Season==season))))
}
get_league_table <- function(season) {
teams = unique(subset(match_results, select=c(AwayTeam), subset=(Season==season)))$AwayTeam
league_table <- data.frame(
team_name = teams,
goals_scored = unlist(lapply(teams, season=season, get_goals_scored)),
goals_conceded = unlist(lapply(teams, season=season, get_goals_conceded)),
points = unlist(lapply(teams, season=season, get_points))
)
league_table <- league_table[order(league_table$points,
league_table$goals_scored - league_table$goals_conceded,
decreasing = T), ]
# sort by points, then by goal difference (that's the rule)
rownames(league_table) <- 1:nrow(league_table)
get_league_table <- league_table
}
# let's check grubbs for some data
seasons = unique(Season)
gds = c()
for (i in seasons) {
teams = unique(match_results$AwayTeam[Season==i])
gds <- c(gds,unlist(lapply(teams, season=i, get_goals_scored)) -
unlist(lapply(teams, season=i, get_goals_conceded)))
}
gds
density(gds)
hist(gds, freq=F,
main="Goal differences",
xlab="Goal differences")
lines(density(gds))
library(outliers)
gds  # from last hw
gds=sort(gds)
hist(gds, freq=F)
lines(density(gds))
shapiro.test(gds)$p.value  # very little p.value\
wilcox.test(gds)
# p-value < 0.05 -> не нормальное распределение
gds
# p-value < 0.05 -> не нормальное распределение
wilcox.test(gds)
# p-value < 0.05 -> не нормальное распределение
mean(gds)
# p-value < 0.05 -> не нормальное распределение
wilcox.test(gds)
# Одновыборочный критерий Уилкоксона
# Гипотеза: выборка из симметричного семейства с известным средним mu
d.intake <- c(5260, 5470, 5640, 6180, 6390, 6515,
6805, 7515, 7515, 8230, 8770)
wilcox.test(d.intake, mu = 7725)
# p-value < 0.05 -> не нормальное распределение
wilcox.test(gds)
# p-value < 0.05 -> не нормальное распределение
mean(gds)
wilcox.test(gds, mu=10)
wilcox.test(gds, mu=1)
wilcox.test(gds, mu=0.1)
wilcox.test(gds)
