match_results
match_results[match_results$Season=='2018-19',][0:10]
match_results[match_results$Season=='2018-19',][0:10,]
set = subset(first_tour, select=c('FTAG', 'FTHG'))
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG'))
# first tour of season
first_tour = match_results[match_results$Season=='2018-19',][0:10,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG'))
set
set = subset(first_tour, select=c('HomeTeam','AwayTeam','FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i]$FTAG, set[i]$FTHG)
set[i]$FTAG = NA
set[i]$FTHG = NA
}
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
impute = transcan(match_results, data=match_results)
impute = transcan(set, data=match_results)
impute = transcan(set, data=set)
impute = transcan(set, data=set)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
impute = transcan(set, data=set)
impute = transcan(set, data=set)
impute = transcan(data=set)
impute = transcan(set,data=set)
set
# first tour of season
first_tour = match_results[match_results$Season=='2018-19',][0:10,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
# imagine we have seen 3 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
impute = transcan(set, data=set)
# first 3 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:30,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
# imagine we have seen 3 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
impute = transcan(set, data=set)
impute
set
transcan(set, data=set)
transcan(set, data=set, nk=1)
transcan(set, data=set, nk=0)
transcan(set, data=set, nk=3)
transcan(set, data=set)
set
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:50,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set, data=set)
transcan(set, data=set, nk=3)
transcan(set, data=set)
transcan(set$FTAG, data=set)
transcan(set, data=match_results)
transcan(set)
transcan(set,data=match_results)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:100,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:20,]
set = subset(first_tour, select=c('FTAG', 'FTHG','HTAG','HTHG','FTR'))
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
transcan(set,data=match_results, nk=3)
transcan(set,data=match_results, nk=0)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:20,]
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG'))
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
set
transcan(set,data=match_results)
str(match_results)
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG','HS','AS','HST','AST','HC','AC'))
str(match_results)
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:100,]
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG','HS','AS','HST','AST','HC','AC'))
str(match_results)
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:100,]
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG')
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
transcan(set,data=match_results)
set
transcan(set,data=match_results)
set
a=transcan(set,data=match_results)
a
a=transcan(set,data=match_results)
a
ads=transcan(set,data=match_results)
ads
transcan(set,data=match_results)
impute.transcan(set,data=match_results)
impute.transcan(impute_arg,data=match_results)
impute.transcan(impute_arg)
impute.transcan(impute_arg, data=mu_liverpool)
impute.transcan(impute_arg, data=mu_liverpool, n.impute=5)
impute_arg <- aregImpute(formula=~FTHG + FTAG, n.impute=5, data=mu_liverpool, nk=0)
mu_liverpool
impute_arg
impute_arg$imputed$FTHG[,1]
actual
mu_liverpool
impute.transcan(impute_arg, data=mu_liverpool)
impute_arg <- aregImpute(formula=~FTHG + FTAG, n.impute=5, data=mu_liverpool, nk=0)
mu_liverpool
impute_arg
impute_arg$imputed$FTHG[,1]
actual
mu_liverpool = rbind(match_results[(match_results$HomeTeam=='Man United' & match_results$AwayTeam=='Liverpool'),],
match_results[(match_results$AwayTeam=='Liverpool' & match_results$HomeTeam=='Man United'),])
mu_liverpool
actual=c()
space_positions=sample(1:nrow(mu_liverpool), 5)
for (i in space_positions) {
actual<-append(actual, mu_liverpool$FTHG[i])
mu_liverpool$FTHG[i] = NA
}
impute_arg <- aregImpute(formula=~FTHG + FTAG, n.impute=5, data=mu_liverpool, nk=0)
mu_liverpool
impute_arg
impute_arg$imputed$FTHG[,1]
actual
impute.transcan(impute_arg, data=mu_liverpool)
impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
mu_liverpool
mu_liverpool = rbind(match_results[(match_results$HomeTeam=='Man United' & match_results$AwayTeam=='Liverpool'),],
match_results[(match_results$AwayTeam=='Liverpool' & match_results$HomeTeam=='Man United'),])
mu_liverpool
actual=c()
space_positions=sample(1:nrow(mu_liverpool), 5)
for (i in space_positions) {
actual<-append(actual, mu_liverpool$FTHG[i])
mu_liverpool$FTHG[i] = NA
}
impute_arg <- aregImpute(formula=~FTHG + FTAG, n.impute=5, data=mu_liverpool, nk=0)
mu_liverpool
impute_arg
impute_arg$imputed$FTHG[,1]
actual
impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
calculated <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
imputed
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
imputed
mu_liverpool
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=10)
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=1)
mu_liverpool
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=2)
mu_liverpool
imputedHops <- as.data.frame(do.call(cbind,imputed))
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=2)
imputedHops <- as.data.frame(do.call(cbind,imputed))
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5)
imputedHops <- as.data.frame(do.call(cbind,imputed))
impute_arg
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:100,]
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG')
set
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG'))
str(match_results)
set
# imagine we have seen 5 matches to half-time
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, kn=2)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=2)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0)
impute.transcan(impute_arg,data=match_results)
impute.transcan(impute_arg, data=set)
impute.transcan(impute_arg, data=set, n.impute=5)
impute.transcan(impute_arg, data=set, imputed=F)
impute.transcan(impute_arg, data=set, imputed=T)
impute.transcan(impute_arg, data=set)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0)
impute.transcan(impute_arg, data=set)
impute_arg <- aregImpute(formula=~set$FTHG + set$FTAG + set$HTAG + set$HTHG, n.impute=5, data=set, nk=0)
impute_arg <- aregImpute(formula=~set$FTHG + set$FTAG + set$HTAG + set$HTHG, n.impute=5, data=set, nk=0)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0)
impute_arg
impute_arg[,1]
impute_arg[1,]
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0)
impute.transcan(impute_arg, data=set)
impute.transcan(impute_arg$FTAG, data=set)
impute.transcan(impute_arg$FTAG, data=set, impute=T)
impute.transcan(impute_arg$FTAG, data=set, impute=F)
impute.transcan(impute_arg$FTAG, data=set, impute=TRUE)
impute.transcan(impute_arg$FTAG[1,], data=set)
impute.transcan(impute_arg$FTAG[1,], data=set, impute=TRUE)
impute.transcan(impute_arg$FTAG[1,], data=set)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0, imputed=T)
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0, imputed=F)
impute.transcan(impute_arg$FTAG[1,], data=set, imputed=T)
impute.transcan(impute_arg$FTAG[1,], data=set)
impute_arg$FTAG
impute_arg$FTAG[1,]
impute_arg$FTAG
impute_arg
impute.transcan(impute_arg$imputed$FTAG[1,], data=set)
impute_arg$imputed$FTAG[1,]
impute.transcan(impute_arg$imputed$FTAG[1,], data=set)
impute.transcan(impute_arg$imputed$FTAG[1,], data=set, imputed=T)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
impute_arg <- aregImpute(formula=~FTHG + FTAG + HTAG + HTHG, n.impute=5, data=set, nk=0)
impute.transcan(impute_arg$imputed$FTAG[1,], data=set)
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5, var=c('FTAG', 'FTHG'))
imputed <- impute.transcan(impute_arg, data=mu_liverpool, imputation=5, var='FTAG')
imputedHops <- as.data.frame(do.call(cbind,imputed))
imputed
imputed <- impute.transcan(impute_arg, data=set, imputation=5, var=set$FTAG)
imputed <- impute.transcan(impute_arg, data=set, imputation=5, var='FTAG')
imputedHops <- as.data.frame(do.call(cbind,imputed))
row.names(imputedHops) <- row.names(hops)
imputed
imputed
imputed <- impute.transcan(impute_arg, data=set, imputation=5, var='FTAG')
imputed
library(pan)
# imagine we have seen 5 matches to half-time
library(pan)
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
pan(set)
# first 5 tours of season
first_tour = match_results[match_results$Season=='2018-19',][0:100,]
set = subset(first_tour, select=c('FTAG','FTHG','HTAG','HTHG','FTR'))
str(match_results)
set
library(pan)
actual = c()
space_positions=sample(1:nrow(set), 5)
for (i in space_positions) {
actual<-c(actual, set[i,]$FTAG, set[i,]$FTHG)
set[i,]$FTAG = NA
set[i,]$FTHG = NA
}
set
pan(set, pred=set$FTR)
a <- 2
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
xcol <- 1:4
zcol <- 1
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
xcol <- 1:4
zcol <- 1
a <- 2
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
a <- 1
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
set
xcol <- 1:4
zcol <- 1
a <- 2
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol, iter=1000)
a <- 3
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol, iter=1000)
xcol <- 1:4
zcol <- 1
a <- 3
c <- 3
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol, iter=1000)
set
xcol <- 1:4
zcol <- 1
a <- 100
c <- 100
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol, iter=1000)
set
xcol <- 1:4
zcol <- 1
a <- 2
c <- 2
id2 <- matrix(c(1,0,0,1),ncol=2,nrow=2)
Binv <- a*id2
Dinv <- c*id2
prior <- list(a=a, Binv=Binv, c=c, Dinv=Dinv)
pan(set, pred=set$FTR, prior=prior, subj=set$FTAG, xcol, zcol, iter=1000)
# Lilliefors (Kolmogorov-Smirnov) test for normality
library(nortest)
# Lilliefors (Kolmogorov-Smirnov) test for normality
install.packages('nortest')
# Lilliefors (Kolmogorov-Smirnov) test for normality
install.packages('nortest')
# Lilliefors (Kolmogorov-Smirnov) test for normality
library(nortest)
gds
lillie.test(gds)
lillie.test(rnorm(100, mean = 5, sd = 3))
lillie.test(gds)
res = lillie.test(gds)
res
res$statistic
res$p.value
res$method
res$data.name
plot(gds)
plot(gds)
barplot(gds)
hist(gds)
boxplot(gds)
gds
res = lillie.test(gds)
lillie.test(gds)
max(gds)
gds[gds!=79]
lillie.test(gds[gds!=79])
lillie.test(gds)
lillie.test(gds[gds!=79])
lillie.test([0,1,2,3,4,5,6])
lillie.test(c(0,1,2,3,4,5,6)
lillie.test(c(0,1,2,3,4,5,6))
lillie.test(c(0,1,2,3,4,5,6))
lillie.test(c(1,1,1,1,1,1,1,1,1))
lillie.test(c(1,1,1,1,1,1,1,1,1,1,1))
lillie.test(c(1,1,1,1,1,1,1,1,1,1,1,2))
lillie.test(c(1,2,3,4,3,2,1))
lillie.test(gds[gds!=79])
lillie.test(gds)
lillie.test(runif(100, min = 2, max = 4))
runif(100, min = 2, max = 4)
runif(100, min = 2, max = 4)
lillie.test(runif(100, min = 2, max = 4))
lillie.test(runif(100, min = 2, max = 4))
lillie.test(runif(100000, min = 2, max = 4))
runif(100, min = 2, max = 4)
runif(100000, min = 2, max = 4)
lillie.test(rnorm(100, mean = 5, sd = 3))
lillie.test(rnorm(100, mean = 5, sd = 3))
lillie.test(rnorm(100, mean = 5, sd = 3))
lillie.test(gds)
# Lilliefors (Kolmogorov-Smirnov) test for normality
library(nortest)
gds  # back to gds
gds
lillie.test(gds)
max(gds)
# hope you are not looking into my code
# because i figured out that all data i was using
# is not normally distributed :(((
install.packages('EnvStats')
rosnertest(gds, k=3)
library(EnvStats)
rosnertest(gds, k=3)
library(EnvStats)
rosnertest(gds, k=3)
rosnerTest(gds, k=3)
rosnerTest(gds, k=2)
rosnerTest(c(gds, 95), k=2)
rosnerTest(c(gds, 100), k=2)
rosnerTest(gds, k=2)
rosnerTest(c(gds, 100), k=2)
rosnerTest(gds, k=2)
rosnerTest(gds, k=3)
