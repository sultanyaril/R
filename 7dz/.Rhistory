drug.df
hist(drug.df)
hist(drug.df$value)
barplot(drug.df$value)
barplot(drug.df$value, beside=T)
drug.df
p <- ggplot(data = drug.df, aes(x = Center, y = value, fill = Response))+xlab("Клиника")+ylab("Доля")
p + geom_bar(stat = "identity", position = "fill") + facet_grid(Group~.)
attach(drug.df)
barplot(drug.df[Group=='Препарат']$value, beside=T)
barplot(drug.df[Group=='Препарат',]$value, beside=T)
drug.df[Group=='Препарат',]
barplot(drug.df[Group=='Препарат',], beside=T)
barplot(drug.df[Group=='Препарат',]$value, beside=T)
margin.table(drug.df, 1)
margin.table(as.matrix(drug.df), 1)
margin.table(drug.df, 1)
margin.table(drug.df, 1)
as.matrix(drug.df)
margin.table(as.matrix(drug.df), 2)
as.matrix(drug.df)
margin.table(as.matrix(drug.df), 'Group')
margin.table(as.matrix(drug.df), 2)
margin.table(as.matrix(drug.df), 3)
margin.table(as.matrix(drug.df), 4)
margin.table(as.matrix(drug.df), 2)
margin.table(as.matrix(drug.df), 1)
margin.table(as.matrix(drug.df))
margin.table(as.matrix(drug.df), 1)
drug.df.data
drug.df
grouping(drug.df)
drug.df
aggragate(Group ~ Response)
aggregate(Group ~ Response)
aggregate(Group ~ Response, drug.df)
aggregate(Group ~ Response, drug.df, sum)
barplot(drug.df[Group=='Препарат',]$value, beside=T)
barplot(drug.df[Group=='Препарат',]$value, beside=F)
barplot(drug.df[Group=='Препарат',]$value ~ drug.df[Group=='Препарат',]$Response, )
barplot(drug.df[Group=='Препарат',]$value ~ drug.df[Group=='Препарат',]$Center, )
counts <- table(drug.df[Group=='Препарат', "Response"])
counts
counts <- table(drug.df[Group=='Препарат', "Response", "value"])
counts
preparat = drug.df[Group=='Препарат', ]
counts <- table(preparat["Response"], )
counts
counts <- table(preparat["Response"], preparat["value"])
counts
counts <- table(preparat$Response, preparat$value)
counts
counts <- table(preparat$Response, preparat$Center)
counts
counts <- table(preparat$Response, preparat$Center, preparat$value)
counts
counts <- table(preparat$Center, preparat$value)
counts
counts <- table(preparat$Center, preparat$Response)
counts
drug.df
preparat = drug.df[Group=='Препарат', ]
counts <- table(preparat$Center, preparat$Response, preparat$value)
counts
counts <- table(preparat$Center, preparat$Response)
counts
counts <- table(preparat$Center, preparat$value)
counts
counts <- table(preparat$Center)
counts
barplot(preparat, beside=T)
preparat = drug.df[Group=='Препарат', ]
barplot(preparat, beside=T)
counts <- table(preparat$Center)
counts
barplot(counts, beside=T)
counts <- table(preparat$Center, preparat$Response)
barplot(counts, beside=T)
table(drug.df)
margin.table(table(drug.df),1)
margin.table(table(drug.df),2)
margin.table(table(drug.df), 3)
margin.table(table(drug.df), 4)
margin.table(table(drug.df), 1)
margin.table(table(drug.df),)
table(drug.df)
t <- table(drug.df)
t[Group=='Препарат']
t[Group=='Препарат',]
t <- table(preparay)
t <- table(preparat)
barplot(counts, beside=T)
t
t <- table(drug.df)
t
barplot(r, beside=T)
barplot(t, beside=T)
t <- table(drug.df)
t
t <- as.matrix(drug.df)
t
barplot(t, beside=T)
t['Group'=='Препарат']
t['Group'=='Препарат']
t['Group']
t <- as.matrix(drug.df)
barplot(t, beside=T)
t <- table(drug.df)
margin.table(t)
margin.table(t, 1)
t
t <- table(preparat)
t
drug.df
p + geom_bar(stat = "identity", position = "dodge") + facet_grid(Group~.)
p <- ggplot(data = drug.df, aes(x = Center, y = value, fill = Response))+xlab("Клиника")+ylab("Доля")
p + geom_bar(stat = "identity", position = "dodge") + facet_grid(Group~.)
p + geom_bar(stat = "identity", position = "dodge") + facet_grid(Group~.)
match_results <- read.csv(file.choose())
match_results
shapiro.test(match_results$FTAG)
shapiro.test(sample(match_results$FTAG, 5000))
shapiro.test(sample(match_results$FTGG, 5000))
shapiro.test(sample(match_results$FTHG, 5000))
match_results
shapiro.test(sample(match_results$HC, 5000))
match_results
shapiro.test(sample(match_results$AC, 5000))
match_results
shapiro.test(sample(match_results$HS, 5000))
shapiro.test(sample(match_results$As, 5000))
shapiro.test(sample(match_results$AS, 5000))
shapiro.test(sample(match_results$FTHG, 5000))
shapiro.test(sample(match_results$FTAG, 5000))
match_results
shapiro.test(sample(match_results$AY, 5000))
shapiro.test(sample(match_resultsHAY, 5000))
shapiro.test(sample(match_resultsHY, 5000))
match_results
data("diamonds")
diamonds = data("diamonds")
diamonds
data("diamonds")
shapiro.test(sample(match_results$FTAG / match_results$FTHG, 5000))
shapiro.test(sample(match_results$FTAG / match_results$FTHG, 5000))
match_results$FTAG / match_results$FTHG
shapiro.test(sample(match_results$FTAG - match_results$FTHG, 5000))
match_results
shapiro.test(sample(match_results$FTAG - match_results$FTHG, 5000))
shapiro.test(sample(match_results$FTAG / match_results$FTHG, 5000))
match_results
match_results
match_results
shapiro.test(sample(match_results$FTAG / match_results$FTHG, 5000))
?diamonds
attach(diamonds)
diamonds
shapiro.test(price)
diamonds[:5000]
diamonds[1:5000]
s = sample(diamons, 5000)
s = sample(diamonds, 5000)
length(diamonds)
diamonds
sample(diamonds, 5000)
sample(as.dataframe(diamonds), 5000)
as.data.frame(diamonds)
sample(as.data.frame(diamonds), 5000)
as.data.frame(diamonds)
length(as.data.frame(diamonds))
diamonds[sample(nrows(diamonds), 5000),]
diamonds[sample(nrows(diamonds), 5000),]
diamonds[sample(nrow(diamonds), 5000),]
shapiro.test(s$price)
# get sample for shapiro.test
s <- diamonds[sample(nrow(diamonds), 5000),]
shapiro.test(s$price)
s
shapiro.test(s$x)
shapiro.test(s$y)
shapiro.test(s$z)
s
shapiro.test(s$caray)
shapiro.test(s$carat)
data("women")
?women
attach(women)
shapiro.test(height)
shapiro.test(weight)
# данные нормальны
cor.test(height ~ weight)
# данные нормальны
cor.test(height, weight)
# cor = 1, значит есть прямая зависимость между величинами
cor.test(height, weight, method = "spearman")
# cor = 1, значит есть прямая зависимость между величинами
cor.test(height, weight, method = "spearman", alternative="less")
# тест Спирмана с проверкой обратной зависимости выдает результат p-value = 1
# т.е. обратной зависимости точно нет
cor.test(height, weight, method = "kendall", alternative = "greater")
data("sleep")
?sleep
sleep
data
data.wide
sleep
# Преобразуем данные в "широкий" формат
data.wide <- dcast(data, subject ~ time, value.var = "result")
data.wide
data
data.wide
sleep
sleep.wide <- dcast(sleep, ID ~ group, value.var = "result")
data("sleep")
?sleep
sleep
data.wide
data
sleep
data
sleep.wide <- dcast(sleep, ID ~ group, value.var = "result")
data
sleep
sleep.wide <- dcast(sleep, ID ~ group, value.var = "extra")
sleep.wide
# Построение таблицы сопряженности по данным
ct <- table(data.wide[, c("pre","post")])
ct
t <- table(sleep.wide[, c("1", "2")])
t
ct
# Без поправки Эдвардса
mcnemar.test(ct, correct = FALSE)
sleep.wide
mice <- matrix(c(13, 44, 25, 29), nrow = 2, byrow = TRUE,
dimnames = list(c("Погибли", "Выжили"),
c("Вирус и сыворотка", "Вирус")))
mice
# Автоматическое решение на основе хи-квадрат теста
chisq.test(mice)
# Таблицы сопряженности произвольного размера
light <- c(12, 40, 45)
dark <- c(87, 34, 75)
very.dark <- c(3, 8, 2)
color.data <- matrix(c(light, dark, very.dark), nrow = 3,
dimnames = list(c("Pop1", "Pop2", "Pop3"),
c("Light", "Dark", "Very dark")))
color.data
# Два значения меньше 5 в very.dark ведут к возникновению предупреждения
chisq.test(color.data)
color.data
chisq.test(sleep.wide)
sleep.wide
chisq.test(sleep.wide)
data("french_fries")
?french_fries
french_fries
data("ability.cov")
ability.cov
chisq.test(ability.cov)
# Два значения меньше 5 в very.dark ведут к возникновению предупреждения
chisq.test(color.data)
ability.cov
chisq.test(ability.cov$cov)
ability.cov$cov
data("cars")
cars
data("mtcars")
mtcars
mtcars
table(mtcars$cyl, mtcars$carb)
chisq.test(t)
t <- table(mtcars$cyl, mtcars$carb)
t
t <- table(mtcars$carb, mtcars$cyl)
t
chisq.test(t)
mtcars
t <- table(mtcars$gear, mtcars$cyl)
t
chisq.test(t)
data("mtcars")
mtcars
t <- table(mtcars$gear, mtcars$cyl)
t
chisq.test(t)
# Два значения меньше 5 в very.dark ведут к возникновению предупреждения
chisq.test(color.data)
match_results
t
team_names <- c('Man United', 'Liverpool')
attach(match_results)
match_results[HomeTeam == 'Man United']
match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool', ]
results = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool', ]
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool', ]
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR")]
home_mu
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
home_liver
results <- c(home_mu, home_liver)
results
results <- home_mu + home_liver
results <- rbind(home_mu, home_liver)
results
color.data <- matrix(c(light, dark, very.dark), nrow = 3,
dimnames = list(c("Pop1", "Pop2", "Pop3"),
c("Light", "Dark", "Very dark")))
color.data
results.data <- matrix(team_names, nrow = 2)
results.data
results.data <- matrix(, nrow = 2, dimnames = list(team_names, team_names))
results.data
results.data <- matrix(c(0), nrow = 2, dimnames = list(team_names, team_names))
results.data
results.data <- matrix(, nrow = 3,
dimnames = list(team_names, c('W', 'D', 'L')))
table(home_mu)
home_muy
results.data <- matrix(, nrow = 2,
dimnames = list(team_names, c('W', 'D', 'L')))
home_mu
home_mu$FTR
table(home_mu$FTR)
list(table(home_mu$FTR))
table(home_mu$FTR)[1]
table(home_mu$FTR)[,1
table(home_mu$FTR)[,1]
table(home_mu$FTR)[,1]
table(home_mu$FTR)[1]
table(home_mu$FTR)[]
table(home_mu$FTR)
str(table(home_mu$FTR))
table(home_mu$FTR)
vector(table(home_mu$FTR))
table(home_mu$FTR)
as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('W', 'D', 'L')))
mu_res = as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('W', 'D', 'L')))
results.data
home_liver
liver_res = as.vector(table(home_liver$FTR))
liver_res
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('W', 'D', 'L')))
results.data
home_mu
home_liver
team_names <- c('Man United', 'Liverpool')
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR"))
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
results <- rbind(home_mu, home_liver)
results
mu_res = as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('H', 'D', 'A')))
results.data
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR"))
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
results <- rbind(home_mu, home_liver)
results
mu_res = as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('H', 'D', 'A')))
results.data
team_names <- c('Man United', 'Liverpool')
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR"))
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
results <- rbind(home_mu, home_liver)
results
mu_res = as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('H', 'D', 'A')))
results.data
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR")]
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
results <- rbind(home_mu, home_liver)
results
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'Liverpool',
c("HomeTeam","AwayTeam","FTR")]
home_liver = match_results[HomeTeam == 'Liverpool' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
mu_res = as.vector(table(home_mu$FTR))
liver_res = as.vector(table(home_liver$FTR))
mu_res
liver_res
table(home_mu)
table(home_mu$FTR)
table(home_liver$FTR)
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data
mu_res
liver_res
table(home_mu$FTR)
table(home_liver$FTR)
mu_res
liver_res
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data
results.data <- matrix(c(mu_res, liver_res), ncol = 2,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data <- matrix(c(mu_res, liver_res), nrow = 2,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data
liver_res
results.data <- matrix(c(mu_res, liver_res), nrow = 2, byrow=T,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data
mu_res
liver_res
results.data <- matrix(c(mu_res, liver_res), nrow = 2, byrow=T,
dimnames = list(team_names, c('A', 'D', 'H')))
results.data
chisq.test(results.data)
color.data
# Два значения меньше 5 в very.dark ведут к возникновению предупреждения
chisq.test(color.data)
results.data
results.data <- matrix(c(mu_res, liver_res), nrow = 3, byrow=F,
dimnames = list(c('A', 'D', 'H'), team_names))
results.data
chisq.test(results.data)
home_mu = match_results[HomeTeam == 'Man United' & AwayTeam == 'West Ham',
c("HomeTeam","AwayTeam","FTR")]
home_whu = match_results[HomeTeam == 'West Ham' & AwayTeam == 'Man United',
c('HomeTeam', 'AwayTeam', 'FTR')]
mu_res = as.vector(table(home_mu$FTR))
table(home_mu$FTR)
whu_res = as.vector(table(home_whu$FTR))
table(home_whu$FTR)
mu_res
whu_res
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('A', 'D', 'H'), team_names))
results.data
chisq.test(results.data)
team_names <- c('Man United', 'West Ham')
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('A', 'D', 'H'), team_names))
results.data
chisq.test(results.data)
chisq <- chisq.test(results.data)
chisq$observed
chisq$expected
library(corrplot)
install.packages('corrplot')
chisq <- chisq.test(results.data)
library(corrplot)
corrplot(chisq$residuals, is.cor = FALSE)
corrplot(chisq$residuals, is.cor = T)
corrplot(chisq$residuals, is.cor = F)
contrib <- 100*chisq$residuals^2/chisq$statistic
corrplot(contrib, is.cor = F)
fisher.test(results.data)
mcnemar.test(results.data)
mcnemar.test(ct)
ct
drug
# Есть и вариант без поправки на непрерывность, односторонние тесты и т.п.
mantelhaen.test(drug)
mantelhaen.test(results.data)
chisq <- chisq.test(results.data)
# p<0.05
contrib <- 100*chisq$residuals^2/chisq$statistic
library(corrplot)
corrplot(contrib, is.cor = F)
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('A', 'D', 'H'), team_names))
results.data
whu_res = rev(whu_res)
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('MU', 'D', 'WHU'), team_names))
results.data
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('WHU', 'D', 'MU'), team_names))
results.data
chisq <- chisq.test(results.data)
# p<0.05
contrib <- 100*chisq$residuals^2/chisq$statistic
# p<0.05
chisq
whu_res = rev(whu_res)
results.data <- matrix(c(mu_res, whu_res), nrow = 3, byrow=F,
dimnames = list(c('H', 'D', 'A'), team_names))
results.data
chisq <- chisq.test(results.data)
# p<0.05
chisq
contrib <- 100*chisq$residuals^2/chisq$statistic
library(corrplot)
corrplot(contrib, is.cor = F)
fisher.test(results.data)
